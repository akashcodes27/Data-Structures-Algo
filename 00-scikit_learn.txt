'''
ACME insurance is an insurance company that offers affordable health insurance to thousands of customers. Lets assume that I am the lead data scientist at ACME insurance. I have been tasked with building an automated system(basically a trained ML-model end-to-end pipeline) which is able to estimate the medical expenditure for the company's new customers. In order to make such an estimation, I am supposed to take following features into consideration such as: age, sex, BMI, smoking habits, children, region of residence.
Estimate that our system generates for each customer will enable us to determine how much insurance to charge from every customer
'''




from urllib.request import urlretrieve

medical_data_url = 'https://github.com/stedy/Machine-Learning-with-R-datasets/blob/master/insurance.csv'
urlretrieve(medical_data_url, 'medical_insurance.csv')

//We used urlretrieve function from the urllib.request module. This function we have used for retrieving csv insurance data. In our case, we have the csv dataset hosted on github. BUT heres a critical mistake that many could make. We cannot directly use the github link for retrieveing data. We need to click on a button that says 'RAW". This opens the link that has this csv file hosted. This is the link that we will be using


Remember all these are pandas functions, as are doing exploratory data analysis and manipulation using the pandas library 


successfully imported the dataset
medical_df = pd.read_csv('medical_insurance.csv')
medical_df.head(3)

# So the "charges" column is our output variable(or the variable that we need to predict using a regression model), and all other attributes are going to be used as input variables. We basically use hostorical data to train our model and to find patterns betwee input attributes and the output attribute "charges". We can then use this system to predict charges for new customers.

medical_df.info()   pandas function
the info() gives me the following information: attribute names, their datatypes, null or not-null constraint, total number of rows
Lets understand how the Dtypes look like in scikit learn:



medical_df.describe()
the describe() gives me some basic statistical information about the dataset
describe() is extremely useful as it gives us some information like: mean, std deviation, min, max, 50%, 70%, 25%
By analyzing these metrics we can make a bunch of inferences like: For eg: Lets consider attribute "age"
By observing medical_df, we can infer that maximum age of customer is 64 and minimum age of customer is 18 implying people outside this age range cannot register for the insurance 
If we observe the static metric 75%, it gives us information that holds true for 75% of the data.
"age": 51  (75% of customers are aged 51)
"bmi": 34 (75% of customers have class 1 obesity)
"children": 2 (75% of customers have 2 children)
"charges": 16639 (75% of customers spend 16639$ on their medical bills)
Just like 75%, we can also refer to "mean", 50%, 25%, min, max to draw different inferences 



Now alongside Exploratory Analysis, lets also do some visualization. For the purpose of visualization, we will use sonme libraries like: Matplotlib, Seaborn, Plotly

import matplotlib.pyplot as plt
import seaborn as sns 
import plotly.express as px   #plotly is used to make the chart interactive
%matplotlib inline   #this makes sure charts are rederred in code and not in external popup

We will provide some settings to improve default style and font sizes 
sns.set_style('darkgrid')
matplotlib.rcParams[font.size] = 14 
matplotlib.rcParams[figure.figsize] = (10, 6)
matplotlib.rcParams[figure.facecolor] = #00000000


fig = px.histogram(
    medical_df,
    x = 'age',
    nbins = 47,
    title = 'Age Distribution Histogram'
)

fig.update_layout(bargap=0.1)
fig.show()


fig = px.histogram(
    medical_df,
    x = 'age',
    color = 'sex',
    color_discrete_sequence = ['maroon', 'blue],
    #here we have the option of providing only a single color which is the default usual behavior, but we can provide 2 colors to then see the difference in distribution for male/female, smoker/smoker, depends on yes/no attribute that we have provided in color attribute 
    nbins = 47,
    title = 'Age Distribution Histogram'
)

fig.update_layout(bargap=0.2)
fig,show()



#Lets look at example 2
fig1 = px.histogram(
    medical_df,
    x = 'charges',
    nbins = 100,
    marginal = 'box'   #this also adds a box plot for both smokers and non smokers 
    color = 'smoker',
    color_discrete_sequence = ['red','blue'],
    title = 'charges distribution between smoker and non-smokers'
)
fig1.update_layout(bargap=0.3)
fig1.show()

# What can we infer from the histogram visualization that we have created below. 
# Most non-smokers have less charges then smokers
# Majority of customers are non-smokers and the remaining are smokers 
# However these inferences are just assumptions. From this data we can infer that, smokers pay higher insurance premiums than non-smokers because of associated health risks. 
# This graph follows the power law or we can also call it exponential.
# What does that mean? What it means is that we can see higher numbers for the initial groups of customers and these numbers start to gradually, exponentially decline as we move to the later groups of customers 
# And according to the power law, usually these initial groups of customers that seem to have the lowest medical charges are represent or constitute the majority. 


fig2 = px.histogram(
    medical_df,
    x = 'charges',
    nbins = 100,
    color = 'region',
    color_discrete_sequence=['blue', 'green', 'purple', 'orange'],
    marginal = 'box',
    title = 'charges distribution between regions'
)

fig2.update_layout(bargap = 0.3)
fig2.show()


medical_df.region.value_counts()
medical_df.sex.value_counts()
medical_df.smoker.value_counts()


px.histogram(
    medical_df, 
    x = 'smoker',
    color = 'sex',
    color_discrete_sequence = ['blue', 'green'],
    title = 'Smoker Distribution'
)


Remember: Whenever we are performing data analysis, exploration, visualization, if we are playing around with sample, it is necessary to ensure that the distributions of the samples match the distribution of the population, as the sample is the representative of the population.



# Lets visualize the relationship between Age and Sum of charges for smokers and non-smokers of different age groups
fig3 = px.histogram(
    medical_df, 
    x= 'age',
    y = 'charges',
    color = 'smoker',
    title = 'Relationship between age and charges'
)

fig3.update_layout(bargap = 0.3)
fig3.show()



# So we can observe that majority of non-smokers have lower insurance charges. Except a small proportion of outliers who may have higher insurance charges
# due to genetic reasons or chronic illnesses
# Whereas smokers on an average have higher insurance charges, and ofcourse even smokers have a dedicated proportion of outliers who may have higher
# insurance charges due to chronic illnesses and genetic reasons



So far, lets quickly summarize what we looked at: 
We have X Attributes: A1, A2, A3, A4, A5, A6, A7, A8 (age, sex, BMI, smoker, gender, Children etc)
We have Y Attribute: C (Charge)
 

So far, we plotted: Histogram, Scatter Plot to determine relationships between the following: 
A1 and c 
A2 and c 
A3 and c 
A4 and c 
We carefully observed the plots to find if any meaningful visual relationships exist between these pairs of traits 
Althought histogram and scatterplots dont fully work for all kinds, so we also use some others like: violin plot(to help us observe the density of these relationships when we deal with discrete variables(and not gradients))
Like usually in scatterplots with gradient attributes, we can clearly observe density by looking at clusters of scatterpoints
But when dealing with a pair such as: Children and Charge 
We wont be able to view density of these plots(like eg: if we have 1000 people having 2 children, then does the majority of these 1000 have high medical charge or low medical charge)

Lets now understand co-relation
In simple terms Correlation helps us make relative comparisons between different pairs of attributes to figure out which ones have a stronger relationship. 

Eg: Correlation between BMI and charge is: 0.19
EG: Correlation between Age and charge is: 0.39 
We compute this using the (.corr()) function 
This relative comparison allows to come to a conclusion that relationship between BMI and charge is relatively useless as compared to relationship between Age and Charge 

lets see the code:
medical_df.charges.corr(medical_df.age)
medical_df.charges.corr(medical_df.bmi)
medical_df.charges.corr(medical_df.children)

But so far we only looked at the numeric attributes, what if we are dealing with categorical attributes 

medical_df.charges.corr(medical_df.smoker.map({'no': 0, 'yes': 1}))
After executing this line in google colab, we could clearly observe that there is a very strong Correlation between Charges attribute and Categorical attribute Smoker 

medical_df.charges.corr(medical_df.children)